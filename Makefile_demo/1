#include <linux/init.h>
#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/mm.h>
#include <linux/slab.h>
#include <linux/fs.h>
#include <linux/string.h>
#include <asm/uaccess.h>

static int buddy_major;
static struct class  *buddy_class;
static struct device *buddy_dev;

#define DEV_NAME = "buddy_test"

/*
 * open
 */
static int buddy_open(struct inode *inode,struct file *filp)
{
    printk(KERN_INFO "Succeed to open file\n");
    filp->private_data = (void *)"buddy_test_file";
    return 0;
}
/*
 * close
 */
static int buddy_release(struct inode *inode,struct file *filp)
{
    printk(KERN_INFO "Succeed to close file[%s]\n",(char *)filp->private_data);
    return 0;
}
/*
 * read
 */
static ssize_t buddy_read(struct file *filp,char __user *buf,size_t count,loff_t *offset)
{
    int ret;
    int len;
    printk(KERN_INFO "Now read data[%s]\n",(char *)filp->private_data);
    len = strlen(filp->private_data);
    ret = copy_to_user(buf,filp->private_data,len);
    if(ret)
	printk(KERN_INFO "Unable to read data\n");
    return 0;
}

static struct file_operations buddy_fops = {
    .read     = buddy_read,
    .open     = buddy_open,
    .release  = buddy_release,
};
/* 
 * init module 
 */
static __init int buddy_init(void)
{
    int ret = 0;

 p
    buddy_major = register_chrdev(0,DEV_NAME,&buddy_fops);
    if(buddy_major == 0)
    {
	printk(KERN_INFO "Unable to register char device\n");
        ret = -EFAULT;
        goto out;
    }
    buddy_class = class_create(THIS_MODULE,DEV_NAME);
    if(IS_ERR(buddy_class))
    {
      	ret = PTR_ERR(buddy_class);
	goto out_register;
    }
    buddy_dev = device_create(buddy_class,NULL,
		MKDEV(buddy_major,0),NULL,DEV_NAME);
    if(IS_ERR(dev))
    {
	ret = PTR_ERR(dev);
	goto out_class;
    }
    return 0;
out_class:
    class_destroy(buddy_class);
out_register:
    unregister_chrdev(buddy_major,DEV_NAME);
out:
    return ret;
}
/*
 * exit module
 */
static __exit void buddy_exit(void)
{
    device_destroy(buddy_class,MKDEV(buddy_major,0));
    class_destroy(buddy_class);
    unregister_chrdev(buddy_major,DEV_NAME);
}

module_init(buddy_init);
module_exit(buddy_exit);

MODULE_AUTHOR("Buddy Zhang <514981221@qq.com>");
MODULE_DESCRIPTION("Buddy test driver");
MODULE_LICENSE("GPL");
